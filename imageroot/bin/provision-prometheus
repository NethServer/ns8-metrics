#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import yaml
import agent
import json
import sys

ALERT_MANAGER_DEFAULT_CONFIG = {
    'global': {},
    'route': {
        'receiver': 'default-receiver',
        'group_by': ['alertname', 'node'],
        'group_wait': '30s',
        'group_interval': '5m',
        'repeat_interval': '3h',
        'routes': [
        {
            'receiver': 'default-receiver',
            'continue': True,
            'matchers': ['service=~".*"'],
        }
        ]
    },
    'inhibit_rules': [
        {
        'source_matchers': ['severity="critical"'],
        'target_matchers': ['severity="warning"'],
        'equal': ['alertname']
        }
    ],
    'receivers': [
        {
        'name': 'default-receiver',
        'webhook_configs': [
            {
            'url': 'http://localhost:9095',
            'send_resolved': True
            }
        ]
        }
    ],
    'templates': ["/etc/alertmanager/templates/*.tmpl"]
}

def generate_prometheus_config(redis_client):
    loki = redis_client.get("cluster/default_instance/loki")
    logcli = redis_client.hgetall(f'module/{loki}/environment')
    # we want to build the loki address
    logcli["LOKI_ADDR"] = logcli["LOKI_ADDR"] + ':' + logcli["LOKI_HTTP_PORT"]

    with open('prometheus.yml', 'w', encoding='utf-8') as fp:
        fp.write("global:\n")
        fp.write("scrape_configs:\n")
        fp.write('  - job_name: "loki"\n')
        fp.write('    basic_auth:\n')
        fp.write(f'      username: "{logcli["LOKI_API_AUTH_USERNAME"]}"\n')
        fp.write(f'      password: "{logcli["LOKI_API_AUTH_PASSWORD"]}"\n')
        fp.write('    static_configs:\n')
        fp.write(f'      - targets: ["{logcli["LOKI_ADDR"].removeprefix("http://")}"]\n')
        fp.write('  - job_name: "providers"\n')
        fp.write('    file_sd_configs:\n')
        fp.write('      - files:\n')
        fp.write('        - "/prometheus/prometheus.d/*.yml"\n')
        fp.write('alerting:\n')
        fp.write('  alertmanagers:\n')
        fp.write('    - static_configs:\n')
        fp.write('      - targets:\n')
        fp.write('        - localhost:9093\n')
        fp.write('rule_files:\n')
        fp.write('  - "/prometheus/rules.d/*.yml"\n')

def validate_and_generate_provider_configs(redis_client):
    for nkey in redis_client.scan_iter("node/*/vpn"):
        node_id = nkey.split('/')[1]
        vpn = redis_client.hgetall(nkey)
        if redis_client.sismember(f"node/{node_id}/flags", "nomodules"):
            continue # skip ns7 migration node
        # Generate configuration file
        with open(f"prometheus.d/node_{node_id}.yml", 'w', encoding='utf-8') as file:
            file.write('- targets:\n')
            file.write(f"    - '{vpn.get('ip_address')}:9100'\n")
            file.write('  labels:\n')
            file.write(f"    target_type: node\n")
            file.write(f"    node: {node_id}\n")

    def _decorate_with_target_type_label(data, target_type):
        for oitem in data:
            oitem['labels']['target_type'] = target_type

    for module in redis_client.scan_iter("module/*/metrics_targets"):
        module_id = module.split('/')[1]
        targets = redis_client.hgetall(module)
        for db_key, db_val in targets.items():
            try:
                data = yaml.safe_load(db_val)
                _decorate_with_target_type_label(data, db_key)
            except Exception as ex:
                print(f"Skipped target {db_key} for module {module_id}: {ex}", file=sys.stderr)
                continue
            filename = f"prometheus.d/provision_{module_id}_{db_key}.yml"
            with open(filename, 'w') as fp:
                 yaml.safe_dump(data, fp, sort_keys=False)

def clean_up_old_provider_configs(redis_client):
    nodes = []
    for nkey in redis_client.scan_iter("node/*/vpn"):
        node_id = nkey.split('/')[1]
        if redis_client.sismember(f"node/{node_id}/flags", "nomodules"):
            continue # skip ns7 migration node
        nodes.append(f"node_{node_id}.yml")
    # Search for all node_*.yml files, delete the ones that are not in the nodes list
    with os.scandir('prometheus.d') as it:
        for entry in it:
            if entry.is_file() and entry.name.startswith('node_') and entry.name not in nodes:
                os.remove(entry.path)

def clean_up_old_provisioned_targets(redis_client):
    with os.scandir('prometheus.d') as it:
        for entry in it:
            if entry.name.startswith('provision_'):
                os.remove(entry.path)

def read_config(redis_client):
    if redis_client.exists(f'module/{os.environ["MODULE_ID"]}/settings'):
        config = redis_client.hgetall(f'module/{os.environ["MODULE_ID"]}/settings')
    else:
        config = {"prometheus_path": None, "grafana_path": None, "mail_to": [], "mail_from": None, "mail_template": None}
    return config

def generate_alertmanagr_config(redis_client):
    config = read_config(redis_client)
    smtp = agent.get_smarthost_settings(redis_client)
    node_fqdn = agent.get_hostname()
    if config.get('mail_from'):
        smtp_from = config['mail_from']
    else:
        smtp_from = 'alertmanager@' + node_fqdn
    try:
        smtp_helo = smtp_from.split('@')[-1]
    except:
        smtp_helo = node_fqdn
    if smtp['enabled'] is True:
        smtp_config = {
            'smtp_from': smtp_from,
            'smtp_hello': smtp_helo,
            'smtp_smarthost': f"{smtp['host']}:{smtp['port']}",
            'smtp_auth_username': smtp['username'],
            'smtp_auth_password': smtp['password'],
            'smtp_require_tls': smtp['encrypt_smtp'] == 'starttls',
            'smtp_tls_config': {
                'insecure_skip_verify': (smtp['tls_verify'] is False),
            },
        }
    else:
        smtp_config = {}

    alert_config = ALERT_MANAGER_DEFAULT_CONFIG
    alert_config['global'] = smtp_config

    if smtp_config != {} and 'mail_to' in config and config['mail_to']:
        mail_config = {
            'send_resolved': True,
            'to': config['mail_to']
        }
        if 'mail_template' in config and config['mail_template']:
            template_key = config['mail_template']
            mail_config['html'] = '{{{{ template "{}_html" . }}}}'.format(template_key)
            mail_config['headers'] = {
                'subject': '{{{{ template "{}_subject" . }}}}'.format(template_key),
            }
        alert_config['receivers'].append({
            'email_configs': [ mail_config ],
            'name': 'mail-alert'
        })
        alert_config['route']['routes'].append({
            'matchers': ['service=~".*"'],
            'receiver': 'mail-alert',
            'continue': True
        })

    os.makedirs('templates.d', exist_ok=True)

    with open('alertmanager.yml', 'w') as f:
        yaml.safe_dump(json.loads(json.dumps(alert_config)), f, default_flow_style=False, sort_keys=False)

def generate_custom_alertmanager_rules(redis_client):
    rules = []
    halerts = redis_client.hgetall(f'module/{os.environ["MODULE_ID"]}/custom_alerts') or {}
    for key, alert in halerts.items():
        if alert:
            try:
                rules.append(yaml.safe_load(alert))
            except Exception as ex:
                print(f"Skipped custom rule {key}: {ex}", file=sys.stderr)
    if rules:
        custom_data = {"groups": [{"name": "Custom", "rules": rules}]}
        yaml.safe_dump(custom_data, open('rules.d/custom.yml', 'w'))
    else:
        try:
            os.remove('rules.d/custom.yml')
        except:
            pass

def generate_custom_alertmanager_templates(redis_client):
    # Custom template declarations are concatenated in the same file:
    with open(f'templates.d/custom.tmpl', 'w') as f:
        for template in redis_client.hvals(f'module/{os.environ["MODULE_ID"]}/custom_templates'):
            if template:
                f.write(template)

# connect to client and fetch providers for prometheus
redis_client = agent.redis_connect(use_replica=True)

# Generate providers configuration
clean_up_old_provisioned_targets(redis_client)
generate_prometheus_config(redis_client)
validate_and_generate_provider_configs(redis_client)
clean_up_old_provider_configs(redis_client)

# Generate alertmanager configuration
generate_alertmanagr_config(redis_client)
generate_custom_alertmanager_rules(redis_client)
generate_custom_alertmanager_templates(redis_client)
